#
# @Copyright Proxy
#

syscfg.defs:
    PN5180_HAL_TIMER:
        description: 'Set the HAL timer to use with PN5180 for guard time'
        value: 1
        restrictions:
            - '((TIMER_0 && (PN5180_HAL_TIMER == 0)) || (TIMER_1 && (PN5180_HAL_TIMER == 1)) ||
                (TIMER_2 && (PN5180_HAL_TIMER == 2)) || (TIMER_3 && (PN5180_HAL_TIMER == 3)) ||
                (TIMER_4 && (PN5180_HAL_TIMER == 4)) || (TIMER_5 && (PN5180_HAL_TIMER == 5)))'

    PN5180_HAL_TIMER_FREQ:
        description: >
            - 'Set the HAL timer frequency, each tick will be 32 micro seconds, we cannot
               go beyond that since max divisor can be 512 since pre-scalar can be 2^9.'
        value: 31250

    PN5180_MAX_INTERRUPTS_PINS:
        description: 'Maximum number of interupt pins of PN5180'
        value: 1

    PN5180_RXTX_HEXDUMP:
        description: 'Print hexdump of the transmitted and received data from the chip'
        value: 1

    PHDRIVER_PIN_RESET:
        description: >
            - 'Set the reset pin for PN5180 on the host MCU'
        value: 7

    PHDRIVER_PIN_IRQ:
        description: >
            - 'Interrupt pin from Frontend to Host'
        value: 'MYNEWT_VAL(PN5180_ONB_INT_PIN)'

    PHDRIVER_PIN_BUSY:
        description: >
            - 'Frontends Busy Status'
        value: 39

    PHDRIVER_PIN_DWL:
        description: >
            - 'Download mode pin of Frontend'
        value: -1

    PN5180_CLI:
        description: 'CLI to experiment with PN5180'
        value: 0

    PN5180_LOG_EVENTS_MAX:
        description: >
            - 'Log events for logging hexdump'
        value: 10

    PN5180_LOG_MODULE:
        description: 'Numeric module ID to use for PN5180 log messages'
        value: 180

    PN5180_LOG_LVL:
        description: 'Minimum level for PN5180 logs'
        value: 1

    SAMAV3_PWM:
        description: 'PWM definition to be used for SAM AV3 CLK generation'
        value:
        restrictions:
            - '((PWM_0 && (SAMAV3_PWM == "NRF_PWM0")) || (PWM_1 && (SAMAV3_PWM == "NRF_PWM1")) ||
                (PWM_2 && (SAMAV3_PWM == "NRF_PWM2")) || (PWM_3 && (SAMAV3_PWM == "NRF_PWM3")) )'

    SAMAV3_PWM_DRV:
        description: 'PWM driver definition to be used for SAM AV3 CLK generation'
        value:
        restrictions:
            - '((PWM_0 && (SAMAV3_PWM_DRV == "NRFX_PWM0_INST_IDX")) || (PWM_1 && (SAMAV3_PWM_DRV == "NRFX_PWM1_INST_IDX")) ||
                (PWM_2 && (SAMAV3_PWM_DRV == "NRFX_PWM2_INST_IDX")) || (PWM_3 && (SAMAV3_PWM_DRV == "NRFX_PWM3_INST_IDX")) )'

    SAMAV3_PWM_COUNT:
        description: '16MHz clock cycles to get 1.778MHz clk signal'
        value: 9

    SAMAV3_PWM_DUTY_CYCLE:
        description: 'Duty cycle value to get a 55% in the 1.778MHz clk signal'
        value: 5

    SAMAV3_UART:
        description: 'Set the UART to be used for the transmission layer of the SAM AV3'
        value:
        restrictions:
            - '((UART_0 && (SAMAV3_UART == "NRF_UARTE0")) || (UART_1 && (SAMAV3_UART == "NRF_UARTE1")) ||
                (UART_2 && (SAMAV3_UART == "NRF_UARTE2")) || (UART_3 && (SAMAV3_UART == "NRF_UARTE3")) )'

    SAMAV3_UART_DRV:
        description: 'Set the UART driver instance to be used for the transmission layer of the SAM AV3'
        value:
        restrictions:
            - '((UART_0 && (SAMAV3_UART_DRV == "NRFX_UARTE0_INST_IDX")) || (UART_1 && (SAMAV3_UART_DRV == "NRFX_UARTE1_INST_IDX")) ||
                (UART_2 && (SAMAV3_UART_DRV == "NRFX_UARTE2_INST_IDX")) || (UART_3 && (SAMAV3_UART_DRV == "NRFX_UARTE3_INST_IDX")) )'

    SAMAV3_UART_BAUDRATE:
        description: 'Set the UART baud rate to be used for the transmission layer of the SAM AV3'
        value: "NRF_UARTE_BAUDRATE_4800"

syscfg.logs:
    PN5180_LOG:
        module: MYNEWT_VAL(PN5180_LOG_MODULE)
        level: MYNEWT_VAL(PN5180_LOG_LVL)
